{"ast":null,"code":"import { compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from \"./ducks/rootSaga\";\n\nfunction configureStore(preloadedState) {\n  /**\n   * Recreate the stdChannel (saga middleware) with every context.\n   */\n  const sagaMiddleware = createSagaMiddleware();\n  const composeEnhancers = false && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n  /**\n   * Since Next.js does server-side rendering, you are REQUIRED to pass\n   * `preloadedState` when creating the store.\n   */\n  // const store = createStore(\n  //   combineReducers(reducers),\n  //   preloadedState,\n  //   composeEnhancers(applyMiddleware(sagaMiddleware)),\n  // );\n\n  /**\n   * next-redux-saga depends on `sagaTask` being attached to the store.\n   * It is used to await the rootSaga task before sending results to the client.\n   */\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["/Users/luxstay/Desktop/zmooz/libraries/store/configStore.ts"],"names":["compose","createSagaMiddleware","rootSaga","configureStore","preloadedState","sagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","sagaTask","run"],"mappings":"AAAA,SAA2CA,OAA3C,QAAuE,OAAvE;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAGA,OAAOC,QAAP;;AAIA,SAASC,cAAT,CAAwBC,cAAxB,EAA0D;AACxD;;;AAGA,QAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,QAAMK,gBAAgB,GACpB,SAA8BC,MAAM,CAACC,oCAArC,GACID,MAAM,CAACC,oCAAP,CAA4C,EAA5C,CADJ,GAEIR,OAHN;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;;AACA;;;;;AAIAS,EAAAA,KAAK,CAACC,QAAN,GAAiBL,cAAc,CAACM,GAAf,CAAmBT,QAAnB,CAAjB;AACA,SAAOO,KAAP;AACD;;AAED,eAAeN,cAAf","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { ApplicationState } from '@/typings.d';\nimport rootSaga from './ducks/rootSaga';\n\nimport * as reducers from './ducks';\n\nfunction configureStore(preloadedState: ApplicationState) {\n  /**\n   * Recreate the stdChannel (saga middleware) with every context.\n   */\n  const sagaMiddleware = createSagaMiddleware();\n  const composeEnhancers =\n    typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n      : compose;\n  /**\n   * Since Next.js does server-side rendering, you are REQUIRED to pass\n   * `preloadedState` when creating the store.\n   */\n  // const store = createStore(\n  //   combineReducers(reducers),\n  //   preloadedState,\n  //   composeEnhancers(applyMiddleware(sagaMiddleware)),\n  // );\n  /**\n   * next-redux-saga depends on `sagaTask` being attached to the store.\n   * It is used to await the rootSaga task before sending results to the client.\n   */\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}