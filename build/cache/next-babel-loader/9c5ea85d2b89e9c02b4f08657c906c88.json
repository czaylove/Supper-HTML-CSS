{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport path from 'ramda/src/path';\nimport { LoadingTypes } from \"./types\";\nvar initState = {\n  global: false,\n  models: {},\n  effects: {}\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (!path(['payload', 'namspace'], action)) {\n    return state;\n  }\n\n  var _action$payload = action.payload,\n      namespace = _action$payload.namespace,\n      actionType = _action$payload.actionType;\n\n  switch (action.type) {\n    case LoadingTypes.SHOW:\n      {\n        return _objectSpread({}, state, {\n          global: true,\n          models: _objectSpread({}, state.models, _defineProperty({}, namespace, true)),\n          effects: _objectSpread({}, state.effects, _defineProperty({}, actionType, true))\n        });\n      }\n\n    case LoadingTypes.HIDE:\n      {\n        var effects = _objectSpread({}, state.effects, _defineProperty({}, actionType, false));\n\n        var models = _objectSpread({}, state.models, _defineProperty({}, namespace, _Object$keys(effects).some(function (aT) {\n          var ns = aT.split('/')[0];\n          if (ns !== namespace) return false;\n          return effects[actionType];\n        })));\n\n        var global = _Object$keys(models).some(function (ns) {\n          return models[ns];\n        });\n\n        var ret = _objectSpread({}, state, {\n          global: global,\n          models: models,\n          effects: effects\n        });\n\n        return ret;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/luxstay/Desktop/zmooz/libraries/store/ducks/loading/reducers.ts"],"names":["path","LoadingTypes","initState","global","models","effects","reducer","state","action","payload","namespace","actionType","type","SHOW","HIDE","some","aT","ns","split","ret"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,SAAsCC,YAAtC;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAE,KADQ;AAEhBC,EAAAA,MAAM,EAAE,EAFQ;AAGhBC,EAAAA,OAAO,EAAE;AAHO,CAAlB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAA4D;AAAA,MAA3DC,KAA2D,uEAAnDL,SAAmD;AAAA,MAAxCM,MAAwC;;AAC1E,MAAI,CAACR,IAAI,CAAC,CAAC,SAAD,EAAY,UAAZ,CAAD,EAA0BQ,MAA1B,CAAT,EAA4C;AAC1C,WAAOD,KAAP;AACD;;AAHyE,wBAIxCC,MAAM,CAACC,OAJiC;AAAA,MAIlEC,SAJkE,mBAIlEA,SAJkE;AAAA,MAIvDC,UAJuD,mBAIvDA,UAJuD;;AAK1E,UAAQH,MAAM,CAACI,IAAf;AACE,SAAKX,YAAY,CAACY,IAAlB;AAAwB;AACtB,iCACKN,KADL;AAEEJ,UAAAA,MAAM,EAAE,IAFV;AAGEC,UAAAA,MAAM,oBAAOG,KAAK,CAACH,MAAb,sBAAsBM,SAAtB,EAAkC,IAAlC,EAHR;AAIEL,UAAAA,OAAO,oBAAOE,KAAK,CAACF,OAAb,sBAAuBM,UAAvB,EAAoC,IAApC;AAJT;AAMD;;AACD,SAAKV,YAAY,CAACa,IAAlB;AAAwB;AACtB,YAAMT,OAAO,qBAAQE,KAAK,CAACF,OAAd,sBAAwBM,UAAxB,EAAqC,KAArC,EAAb;;AACA,YAAMP,MAAM,qBACPG,KAAK,CAACH,MADC,sBAETM,SAFS,EAEG,aAAYL,OAAZ,EAAqBU,IAArB,CAA0B,UAAAC,EAAE,EAAI;AAC3C,cAAMC,EAAE,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,EAAc,CAAd,CAAX;AACA,cAAID,EAAE,KAAKP,SAAX,EAAsB,OAAO,KAAP;AACtB,iBAAOL,OAAO,CAACM,UAAD,CAAd;AACD,SAJY,CAFH,EAAZ;;AAQA,YAAMR,MAAM,GAAG,aAAYC,MAAZ,EAAoBW,IAApB,CAAyB,UAAAE,EAAE;AAAA,iBAAIb,MAAM,CAACa,EAAD,CAAV;AAAA,SAA3B,CAAf;;AACA,YAAME,GAAG,qBACJZ,KADI;AAEPJ,UAAAA,MAAM,EAANA,MAFO;AAGPC,UAAAA,MAAM,EAANA,MAHO;AAIPC,UAAAA,OAAO,EAAPA;AAJO,UAAT;;AAMA,eAAOc,GAAP;AACD;;AACD;AACE,aAAOZ,KAAP;AA7BJ;AA+BD,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["import path from 'ramda/src/path';\nimport { LoadingAction, LoadingState, LoadingTypes } from './types';\n\nconst initState = {\n  global: false,\n  models: {},\n  effects: {},\n};\n\nconst reducer = (state = initState, action: LoadingAction): LoadingState => {\n  if (!path(['payload', 'namspace'], action)) {\n    return state;\n  }\n  const { namespace, actionType } = action.payload;\n  switch (action.type) {\n    case LoadingTypes.SHOW: {\n      return {\n        ...state,\n        global: true,\n        models: { ...state.models, [namespace]: true },\n        effects: { ...state.effects, [actionType]: true },\n      };\n    }\n    case LoadingTypes.HIDE: {\n      const effects = { ...state.effects, [actionType]: false };\n      const models = {\n        ...state.models,\n        [namespace]: Object.keys(effects).some(aT => {\n          const ns = aT.split('/')[0];\n          if (ns !== namespace) return false;\n          return effects[actionType];\n        }),\n      };\n      const global = Object.keys(models).some(ns => models[ns]);\n      const ret = {\n        ...state,\n        global,\n        models,\n        effects,\n      };\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}