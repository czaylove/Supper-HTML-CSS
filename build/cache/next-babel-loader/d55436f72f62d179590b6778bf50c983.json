{"ast":null,"code":"var __jsx = React.createElement;\nimport 'moment/locale/vi';\nimport 'antd/dist/antd.less';\nimport { Provider } from 'react-redux';\nimport App, { Container } from 'next/app';\nimport React from 'react';\nimport moment from 'moment';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { appWithTranslation, i18n } from \"../libraries/i18n\";\nimport configStore from \"../libraries/store/configStore\";\n\nif (process.env.NODE_ENV !== 'production' && process.browser) {\n  const {\n    registerObserver\n  } = require('react-perf-devtool'); // eslint-disable-line\n\n\n  registerObserver();\n} // Simple, no?\n\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is\n * a server side or client side\n * @param {Request} options.req NodeJS Request object\n * (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object\n * (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key CONFIGe used to\n * preserve store in global namespace for safe HMR\n */\n\n\nconst makeStore = initialState => configStore(initialState);\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    moment.locale(i18n.language);\n    return __jsx(Container, null, __jsx(Provider, {\n      store: store\n    }, __jsx(Component, pageProps)));\n  }\n\n}\n\nexport default withRedux(makeStore, {\n  debug: true\n})(appWithTranslation(withReduxSaga(MyApp)));","map":{"version":3,"sources":["/Users/luxstay/Desktop/zmooz/pages/_app.tsx"],"names":["Provider","App","Container","React","moment","withRedux","withReduxSaga","appWithTranslation","i18n","configStore","process","env","NODE_ENV","browser","registerObserver","require","makeStore","initialState","MyApp","getInitialProps","Component","ctx","pageProps","render","store","props","locale","language","debug"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAO,qBAAP;AAEA,SAASA,QAAT,QAAyB,aAAzB;AAEA,OAAOC,GAAP,IAAcC,SAAd,QAA2C,UAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAGA,SAASC,kBAAT,EAA6BC,IAA7B;AACA,OAAOC,WAAP;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCF,OAAO,CAACG,OAArD,EAA8D;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAuBC,OAAO,CAAC,oBAAD,CAApC,CAD4D,CACA;;;AAC5DD,EAAAA,gBAAgB;AACjB,C,CAED;;AACA;;;;;;;;;;;;;;AAYA,MAAME,SAAS,GAAIC,YAAD,IAAoCR,WAAW,CAACQ,YAAD,CAAjE;;AAEA,MAAMC,KAAN,SAAoBjB,GAApB,CAA4D;AAC1D,eAAakB,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAA6D;AAC3D,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GACd,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CADQ,GAEd,EAFJ;AAIA,WAAO;AAAEC,MAAAA;AAAF,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEH,MAAAA,SAAF;AAAaE,MAAAA,SAAb;AAAwBE,MAAAA;AAAxB,QAAkC,KAAKC,KAA7C;AACArB,IAAAA,MAAM,CAACsB,MAAP,CAAclB,IAAI,CAACmB,QAAnB;AACA,WACE,MAAC,SAAD,QACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEH;AAAjB,OACE,MAAC,SAAD,EAAeF,SAAf,CADF,CADF,CADF;AAOD;;AAnByD;;AAsB5D,eAAejB,SAAS,CAACW,SAAD,EAAY;AAAEY,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAAT,CACbrB,kBAAkB,CAACD,aAAa,CAACY,KAAD,CAAd,CADL,CAAf","sourcesContent":["import 'moment/locale/vi';\nimport 'antd/dist/antd.less';\n\nimport { Provider } from 'react-redux';\nimport { Store } from 'redux';\nimport App, { Container, AppContext } from 'next/app';\nimport React from 'react';\nimport moment from 'moment';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { ApplicationState } from '@/typings.d';\n\nimport { appWithTranslation, i18n } from '@/libraries/i18n';\nimport configStore from '@/libraries/store/configStore';\n\nif (process.env.NODE_ENV !== 'production' && process.browser) {\n  const { registerObserver } = require('react-perf-devtool'); // eslint-disable-line\n  registerObserver();\n}\n\n// Simple, no?\n/**\n * @param {object} initialState\n * @param {boolean} options.isServer indicates whether it is\n * a server side or client side\n * @param {Request} options.req NodeJS Request object\n * (not set when client applies initialState from server)\n * @param {Request} options.res NodeJS Request object\n * (not set when client applies initialState from server)\n * @param {boolean} options.debug User-defined debug mode param\n * @param {string} options.storeKey This key CONFIGe used to\n * preserve store in global namespace for safe HMR\n */\nconst makeStore = (initialState: ApplicationState) => configStore(initialState);\n\nclass MyApp extends App<{ store: Store<ApplicationState> }> {\n  static async getInitialProps({ Component, ctx }: AppContext) {\n    const pageProps = Component.getInitialProps\n      ? await Component.getInitialProps(ctx)\n      : {};\n\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, pageProps, store } = this.props;\n    moment.locale(i18n.language);\n    return (\n      <Container>\n        <Provider store={store}>\n          <Component {...pageProps} />\n        </Provider>\n      </Container>\n    );\n  }\n}\n\nexport default withRedux(makeStore, { debug: true })(\n  appWithTranslation(withReduxSaga(MyApp)),\n);\n"]},"metadata":{},"sourceType":"module"}