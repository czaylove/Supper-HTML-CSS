{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport path from 'ramda/src/path';\nimport { LoadingTypes } from \"./types\";\nconst initState = {\n  global: false,\n  models: {},\n  effects: {}\n};\n\nconst reducer = (state = initState, action) => {\n  if (!path(['payload', 'namspace'], action)) {\n    return state;\n  }\n\n  const {\n    namespace,\n    actionType\n  } = action.payload;\n\n  switch (action.type) {\n    case LoadingTypes.SHOW:\n      {\n        return _objectSpread({}, state, {\n          global: true,\n          models: _objectSpread({}, state.models, {\n            [namespace]: true\n          }),\n          effects: _objectSpread({}, state.effects, {\n            [actionType]: true\n          })\n        });\n      }\n\n    case LoadingTypes.HIDE:\n      {\n        const effects = _objectSpread({}, state.effects, {\n          [actionType]: false\n        });\n\n        const models = _objectSpread({}, state.models, {\n          [namespace]: _Object$keys(effects).some(aT => {\n            const ns = aT.split('/')[0];\n            if (ns !== namespace) return false;\n            return effects[actionType];\n          })\n        });\n\n        const global = _Object$keys(models).some(ns => models[ns]);\n\n        const ret = _objectSpread({}, state, {\n          global,\n          models,\n          effects\n        });\n\n        return ret;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/luxstay/Desktop/zmooz/libraries/store/ducks/loading/reducers.ts"],"names":["path","LoadingTypes","initState","global","models","effects","reducer","state","action","namespace","actionType","payload","type","SHOW","HIDE","some","aT","ns","split","ret"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,SAAsCC,YAAtC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAE,KADQ;AAEhBC,EAAAA,MAAM,EAAE,EAFQ;AAGhBC,EAAAA,OAAO,EAAE;AAHO,CAAlB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA4D;AAC1E,MAAI,CAACR,IAAI,CAAC,CAAC,SAAD,EAAY,UAAZ,CAAD,EAA0BQ,MAA1B,CAAT,EAA4C;AAC1C,WAAOD,KAAP;AACD;;AACD,QAAM;AAAEE,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA4BF,MAAM,CAACG,OAAzC;;AACA,UAAQH,MAAM,CAACI,IAAf;AACE,SAAKX,YAAY,CAACY,IAAlB;AAAwB;AACtB,iCACKN,KADL;AAEEJ,UAAAA,MAAM,EAAE,IAFV;AAGEC,UAAAA,MAAM,oBAAOG,KAAK,CAACH,MAAb;AAAqB,aAACK,SAAD,GAAa;AAAlC,YAHR;AAIEJ,UAAAA,OAAO,oBAAOE,KAAK,CAACF,OAAb;AAAsB,aAACK,UAAD,GAAc;AAApC;AAJT;AAMD;;AACD,SAAKT,YAAY,CAACa,IAAlB;AAAwB;AACtB,cAAMT,OAAO,qBAAQE,KAAK,CAACF,OAAd;AAAuB,WAACK,UAAD,GAAc;AAArC,UAAb;;AACA,cAAMN,MAAM,qBACPG,KAAK,CAACH,MADC;AAEV,WAACK,SAAD,GAAa,aAAYJ,OAAZ,EAAqBU,IAArB,CAA0BC,EAAE,IAAI;AAC3C,kBAAMC,EAAE,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,EAAc,CAAd,CAAX;AACA,gBAAID,EAAE,KAAKR,SAAX,EAAsB,OAAO,KAAP;AACtB,mBAAOJ,OAAO,CAACK,UAAD,CAAd;AACD,WAJY;AAFH,UAAZ;;AAQA,cAAMP,MAAM,GAAG,aAAYC,MAAZ,EAAoBW,IAApB,CAAyBE,EAAE,IAAIb,MAAM,CAACa,EAAD,CAArC,CAAf;;AACA,cAAME,GAAG,qBACJZ,KADI;AAEPJ,UAAAA,MAFO;AAGPC,UAAAA,MAHO;AAIPC,UAAAA;AAJO,UAAT;;AAMA,eAAOc,GAAP;AACD;;AACD;AACE,aAAOZ,KAAP;AA7BJ;AA+BD,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["import path from 'ramda/src/path';\nimport { LoadingAction, LoadingState, LoadingTypes } from './types';\n\nconst initState = {\n  global: false,\n  models: {},\n  effects: {},\n};\n\nconst reducer = (state = initState, action: LoadingAction): LoadingState => {\n  if (!path(['payload', 'namspace'], action)) {\n    return state;\n  }\n  const { namespace, actionType } = action.payload;\n  switch (action.type) {\n    case LoadingTypes.SHOW: {\n      return {\n        ...state,\n        global: true,\n        models: { ...state.models, [namespace]: true },\n        effects: { ...state.effects, [actionType]: true },\n      };\n    }\n    case LoadingTypes.HIDE: {\n      const effects = { ...state.effects, [actionType]: false };\n      const models = {\n        ...state.models,\n        [namespace]: Object.keys(effects).some(aT => {\n          const ns = aT.split('/')[0];\n          if (ns !== namespace) return false;\n          return effects[actionType];\n        }),\n      };\n      const global = Object.keys(models).some(ns => models[ns]);\n      const ret = {\n        ...state,\n        global,\n        models,\n        effects,\n      };\n      return ret;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}