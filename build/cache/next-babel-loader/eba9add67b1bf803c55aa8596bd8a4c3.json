{"ast":null,"code":"import persist from \"../../../persist\";\nimport { AuthActionTypes } from \"./types\";\n\nvar updateMe = function updateMe() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? {} : _ref$data;\n\n  return {\n    type: AuthActionTypes.UPDATE_ME,\n    payload: data\n  };\n};\n\nvar signIn = function signIn(token, refreshToken) {\n  persist.willSetAccessToken(token);\n  return {\n    type: AuthActionTypes.AUTH_SIGNIN,\n    payload: {\n      token: token,\n      refreshToken: refreshToken\n    }\n  };\n};\n\nvar signOut = function signOut() {\n  persist.willRemoveAccessToken();\n  return {\n    type: AuthActionTypes.AUTH_SIGNOUT\n  };\n};\n\nexport { updateMe, signIn, signOut };","map":{"version":3,"sources":["/Users/luxstay/Desktop/zmooz/libraries/store/ducks/auth/actions.ts"],"names":["persist","AuthActionTypes","updateMe","data","type","UPDATE_ME","payload","signIn","token","refreshToken","willSetAccessToken","AUTH_SIGNIN","signOut","willRemoveAccessToken","AUTH_SIGNOUT"],"mappings":"AAAA,OAAOA,OAAP;AAEA,SAASC,eAAT;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,iFAAiB,EAAjB;AAAA,uBAAGC,IAAH;AAAA,MAAGA,IAAH,0BAAU,EAAV;;AAAA,SAAyB;AACxCC,IAAAA,IAAI,EAAEH,eAAe,CAACI,SADkB;AAExCC,IAAAA,OAAO,EAAEH;AAF+B,GAAzB;AAAA,CAAjB;;AAKA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAgBC,YAAhB,EAAyC;AACtDT,EAAAA,OAAO,CAACU,kBAAR,CAA2BF,KAA3B;AACA,SAAO;AACLJ,IAAAA,IAAI,EAAEH,eAAe,CAACU,WADjB;AAELL,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAALA,KADO;AAEPC,MAAAA,YAAY,EAAZA;AAFO;AAFJ,GAAP;AAOD,CATD;;AAWA,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBZ,EAAAA,OAAO,CAACa,qBAAR;AACA,SAAO;AACLT,IAAAA,IAAI,EAAEH,eAAe,CAACa;AADjB,GAAP;AAGD,CALD;;AAOA,SAASZ,QAAT,EAAmBK,MAAnB,EAA2BK,OAA3B","sourcesContent":["import persist from '@/libraries/persist';\n\nimport { AuthActionTypes } from './types';\n\nconst updateMe = ({ data = {} } = {}) => ({\n  type: AuthActionTypes.UPDATE_ME,\n  payload: data,\n});\n\nconst signIn = (token: string, refreshToken: string) => {\n  persist.willSetAccessToken(token);\n  return {\n    type: AuthActionTypes.AUTH_SIGNIN,\n    payload: {\n      token,\n      refreshToken,\n    },\n  };\n};\n\nconst signOut = () => {\n  persist.willRemoveAccessToken();\n  return {\n    type: AuthActionTypes.AUTH_SIGNOUT,\n  };\n};\n\nexport { updateMe, signIn, signOut };\n"]},"metadata":{},"sourceType":"module"}